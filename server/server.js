import * as sdk from "microsoft-cognitiveservices-speech-sdk";
import express from "express";
import {createServer} from "http";
import {Server} from "socket.io";
import 'dotenv/config'
import {PassThrough} from "stream";
// import { resolve } from "path";
// import * as path from 'path';

const app = express();
const httpServer = createServer(app);
const io = new Server(httpServer, {
    cors: {
        origin: "*",
    }
});

// app.get('/', async (req, res) => {
//     res.send(await textToSpeech("HELLO"));
// })

// app.get('/', async (req, res) => {
//     const __dirname = path.resolve(path.dirname(''));
//     const audioStream = await textToSpeech("TEST");
//     //res.sendFile(path.join(__dirname, '/index.html'));
//     res.send(audioStream);
// })


// the important part I am getting here is the text from the client. Then I am returning the buffer (when the promise is resolved)
async function textToSpeech(text) {
    if (text == null || text == undefined) return;
    const speechConfig = sdk.SpeechConfig.
        fromSubscription(process.env.AZURE_KEY, "northeurope")
    speechConfig.speechSynthesisVoiceName = "en-US-JennyNeural";
    let bufferStream = await getBufferStream();
    async function getBufferStream() {
        return new Promise((resolve, reject) => {
            let synthesizer = new sdk.SpeechSynthesizer(speechConfig);
            synthesizer.speakTextAsync(JSON.parse(JSON.stringify(text)).text
                , result => {
                    if (result) {
                        const { audioData } = result;
                        synthesizer.close();
                        //const bufferStream = new PassThrough();
                        //bufferStream.end(Buffer.from(audioData));
                        resolve(audioData);
                    }
                },
                error => {
                    synthesizer.close();
                    reject(error);
                }
            )
        })
    }
    // return new Blob(bufferStream.pipe());
    return bufferStream;
}
io.on("connection", (socket) => {
    console.log(`new client:${socket.id}`);
    socket.emit("connection");
    socket.on("TextToSpeech", async (text) => {
        console.log(await textToSpeech(text));
        let bufferStream = await textToSpeech(text);
        //let buff = Buffer.from(bufferStream);
        io.emit("TextToSpeech", bufferStream);
        // above I am returning the audio stream generated by all mighty azure
    })
});

httpServer.listen(8000);